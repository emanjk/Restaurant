/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import Modelo.Mesa;
import Modelo.Reserva;
import Persistencia.Conexion;
import Persistencia.MesaData;
import Persistencia.ReservaData;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import javax.swing.ButtonGroup;
import javax.swing.SpinnerListModel;

/**
 *
 * @author Roma
 */
public class GReservas extends javax.swing.JPanel {
    private ButtonGroup grupoEstado;
    private ButtonGroup grupoEstado2;
    private ReservaData reservaData; 
    private MesaData mesaData;
    private DefaultTableModel modelo;
    private DefaultTableModel modelo1; 
    /**
     * Creates new form GReservas
     */
    public GReservas(Connection connection) {
        initComponents();
        grupoEstado = new ButtonGroup();
        grupoEstado.add(jRON);
        grupoEstado.add(jROFF);
        grupoEstado2 = new ButtonGroup();
        grupoEstado2.add(jRON2);
        grupoEstado2.add(jROFF2);

        if (connection == null) {
            throw new IllegalArgumentException("La conexión no puede ser nula");
        }

        // Inicializar reservaData y mesaData con la conexión
        this.reservaData = new ReservaData(connection);
        this.mesaData = new MesaData(connection);
        
        // Inicialización de modelos de tabla
        this.modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int fila, int columna) {
                return false; // Evita la modificación de datos en las celdas
            }
        };

        this.modelo1 = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int fila, int columna) {
                return false; // Evita la modificación de datos en las celdas
            }
        };

        configureDateTimePickers();
        jSIdMesa.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        jSComens.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        jSID.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        jSId2.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        
        jTTelef.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (!Character.isDigit(c)) {
                    evt.consume();
                    JOptionPane.showMessageDialog(null, "Solo se permiten números en el campo de Código.");
                }
            }
        });
        
        jTNombre.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                filtrarPorNombreCliente();
            }
        });
        
        armarCabecera(); // Configurar cabecera de la tabla
        cargarDatos();
        armarCabecera1(); // Configurar cabecera de la tabla
        cargarDatos1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel2 = new javax.swing.JPanel();
    jTNombre = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jTTelef = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    jSComens = new javax.swing.JSpinner();
    jCBSector = new javax.swing.JComboBox<>();
    jBGuardar = new javax.swing.JButton();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    jSIdMesa = new javax.swing.JSpinner();
    jDate = new com.toedter.calendar.JDateChooser();
    jSHora = new javax.swing.JSpinner();
    jLabel8 = new javax.swing.JLabel();
    jRON = new javax.swing.JRadioButton();
    jROFF = new javax.swing.JRadioButton();
    jLabel9 = new javax.swing.JLabel();
    jBModificar = new javax.swing.JButton();
    Limpiar = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTR = new javax.swing.JTable();
    jSID = new javax.swing.JSpinner();
    jDate1 = new com.toedter.calendar.JDateChooser();
    jDate2 = new com.toedter.calendar.JDateChooser();
    jLabel14 = new javax.swing.JLabel();
    jLabel16 = new javax.swing.JLabel();
    jPanel1 = new javax.swing.JPanel();
    jPanel3 = new javax.swing.JPanel();
    jLabel10 = new javax.swing.JLabel();
    jLabel11 = new javax.swing.JLabel();
    jSId2 = new javax.swing.JSpinner();
    jLabel15 = new javax.swing.JLabel();
    jRON2 = new javax.swing.JRadioButton();
    jROFF2 = new javax.swing.JRadioButton();
    jLabel12 = new javax.swing.JLabel();
    jCBSector1 = new javax.swing.JComboBox<>();
    exit = new javax.swing.JButton();
    jScrollPane2 = new javax.swing.JScrollPane();
    jtMesas = new javax.swing.JTable();
    filtroSit1 = new javax.swing.JComboBox<>();
    jLabel13 = new javax.swing.JLabel();

    jPanel2.setBackground(new java.awt.Color(255, 204, 153));

    jLabel1.setForeground(new java.awt.Color(0, 0, 0));
    jLabel1.setText("NOMBRE DE CLIENTE:");

    jLabel2.setForeground(new java.awt.Color(0, 0, 0));
    jLabel2.setText("TELEFONO:");

    jLabel3.setForeground(new java.awt.Color(0, 0, 0));
    jLabel3.setText("FECHA:");

    jLabel4.setForeground(new java.awt.Color(0, 0, 0));
    jLabel4.setText("COMENSALES:");

    jLabel5.setForeground(new java.awt.Color(0, 0, 0));
    jLabel5.setText("SECTOR");

    jSComens.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSComensStateChanged(evt);
      }
    });

    jCBSector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Terraza", "Patio", "Comedor" }));
    jCBSector.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCBSectorActionPerformed(evt);
      }
    });

    jBGuardar.setText("Confirmar Reserva");
    jBGuardar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jBGuardarActionPerformed(evt);
      }
    });

    jLabel6.setForeground(new java.awt.Color(0, 0, 0));
    jLabel6.setText("MESA");

    jLabel7.setFont(new java.awt.Font("Felix Titling", 3, 14)); // NOI18N
    jLabel7.setForeground(new java.awt.Color(255, 102, 51));
    jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel7.setText("CREAR RESERVA");

    jDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        jDatePropertyChange(evt);
      }
    });

    jLabel8.setForeground(new java.awt.Color(0, 0, 0));
    jLabel8.setText("ESTADO");

    jRON.setText("Alta");
    jRON.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jRONActionPerformed(evt);
      }
    });

    jROFF.setText("Baja");
    jROFF.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jROFFActionPerformed(evt);
      }
    });

    jLabel9.setForeground(new java.awt.Color(0, 0, 0));
    jLabel9.setText("ID");

    jBModificar.setText("MODIFICAR");
    jBModificar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jBModificarActionPerformed(evt);
      }
    });

    Limpiar.setText("Limpiar");
    Limpiar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        LimpiarActionPerformed(evt);
      }
    });

    jTR.setBackground(new java.awt.Color(0, 153, 153));
    jTR.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    jScrollPane1.setViewportView(jTR);

    jSID.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSIDStateChanged(evt);
      }
    });

    jDate2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        jDate2PropertyChange(evt);
      }
    });

    jLabel14.setFont(new java.awt.Font("Felix Titling", 3, 14)); // NOI18N
    jLabel14.setForeground(new java.awt.Color(255, 102, 51));
    jLabel14.setText("FILTRAR RESERVAS ENTRE DOS FECHAS:");

    jLabel16.setForeground(new java.awt.Color(0, 0, 0));
    jLabel16.setText("HORA:");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                      .addGap(16, 16, 16)
                      .addComponent(jBModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addGap(28, 28, 28)
                      .addComponent(jLabel9))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                      .addGap(6, 6, 6)
                      .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addGap(18, 18, 18)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                      .addComponent(jSID, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                      .addComponent(Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jBGuardar)))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                      .addGap(32, 32, 32)
                      .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                          .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                          .addGap(52, 52, 52))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                          .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                          .addGap(39, 39, 39))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                      .addComponent(jLabel1)
                      .addGap(53, 53, 53)))
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSIdMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBSector, 0, 161, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                      .addComponent(jRON)
                      .addGap(18, 18, 18)
                      .addComponent(jROFF, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTTelef, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(jDate, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(jSHora, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(jSComens, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(jTNombre))))
              .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(24, 24, 24)
            .addComponent(jDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(55, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(7, 7, 7)))
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jTNombre))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jTTelef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jLabel3)
            .addGap(18, 18, 18)
            .addComponent(jLabel16)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jSComens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel4))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jCBSector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel5))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jSIdMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel6))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel8)
          .addComponent(jRON)
          .addComponent(jROFF))
        .addGap(18, 18, 18)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jBModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel9)
          .addComponent(jSID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addComponent(jLabel14)
        .addGap(18, 18, 18)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );

    jPanel1.setBackground(new java.awt.Color(255, 153, 51));

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    jLabel10.setFont(new java.awt.Font("Felix Titling", 3, 14)); // NOI18N
    jLabel10.setForeground(new java.awt.Color(255, 102, 0));
    jLabel10.setText("Verificar disponibilidad de mesa por:");

    jLabel11.setForeground(new java.awt.Color(0, 0, 0));
    jLabel11.setText("ID");

    jSId2.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSId2StateChanged(evt);
      }
    });

    jLabel15.setForeground(new java.awt.Color(0, 0, 0));
    jLabel15.setText("ESTADO");

    jRON2.setText("Alta");
    jRON2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jRON2ActionPerformed(evt);
      }
    });

    jROFF2.setText("Baja");
    jROFF2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jROFF2ActionPerformed(evt);
      }
    });

    jLabel12.setForeground(new java.awt.Color(0, 0, 0));
    jLabel12.setText("SECTOR");

    jCBSector1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Terraza", "Comedor", "Patio" }));
    jCBSector1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCBSector1ActionPerformed(evt);
      }
    });

    exit.setText("X");
    exit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exitActionPerformed(evt);
      }
    });

    jtMesas.setBackground(new java.awt.Color(0, 153, 153));
    jtMesas.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
    jtMesas.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    jScrollPane2.setViewportView(jtMesas);

    filtroSit1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Libre", "Ocupada", "Reservada" }));
    filtroSit1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        filtroSit1ActionPerformed(evt);
      }
    });

    jLabel13.setForeground(new java.awt.Color(0, 0, 0));
    jLabel13.setText("SITUACION");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(jLabel10)
            .addGap(114, 114, 114)
            .addComponent(exit))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(29, 29, 29)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel13)
              .addComponent(jLabel12)
              .addComponent(jLabel11)
              .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jRON2)
                .addGap(18, 18, 18)
                .addComponent(jROFF2))
              .addComponent(jSId2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCBSector1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(filtroSit1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(exit)
          .addComponent(jLabel10))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel11)
          .addComponent(jSId2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jCBSector1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel12))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel13)
          .addComponent(filtroSit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel15)
          .addComponent(jRON2)
          .addComponent(jROFF2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

    
    // Boton 'Guardar reserva'
    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        Date reservationDateTime = getSelectedDateTime();

        if (reservationDateTime == null) {
            JOptionPane.showMessageDialog(this, "Seleccione una fecha y hora válidas.", "Fecha y Hora requeridas", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String nombreCliente = jTNombre.getText();
        String telefono = jTTelef.getText();
        int comensales = (int) jSComens.getValue();
        String sector = jCBSector.getSelectedItem().toString(); //sector seleccionado     
        int idMesa = (int) jSIdMesa.getValue();// Obtener el ID de la mesa seleccionada
        
        boolean estadoReserva = jRON.isSelected();

        if (nombreCliente.isEmpty() || telefono.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un nombre y teléfono válidos.", "Nombre y Teléfono requeridos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Verificar que se haya seleccionado una mesa válida
        if (idMesa == 0) {
            JOptionPane.showMessageDialog(this, "Seleccione una mesa válida para el sector.", "Mesa requerida", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Buscar la mesa en la base de datos
        Mesa mesaSeleccionada = mesaData.buscarMesa(idMesa);
     
        // Verificar que la mesa esté en el sector seleccionado y esté disponible
        if (mesaSeleccionada == null || !mesaSeleccionada.getSector().equalsIgnoreCase(sector) || !mesaSeleccionada.isEstado()) {
            JOptionPane.showMessageDialog(this, "La mesa seleccionada no está disponible en el sector especificado.", "Mesa no disponible", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Crear la reserva
        Reserva reserva = new Reserva();
        reserva.setNombreCliente(nombreCliente);
        reserva.setTelefono(telefono);
        reserva.setComensales(comensales);
        reserva.setSector(sector);
        reserva.setFechaHora(reservationDateTime.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        reserva.setEstado(estadoReserva);
        reserva.setMesa(mesaSeleccionada);

        // Verificar disponibilidad antes de guardar la reserva
        if (!reservaData.verificarDisponibilidad(idMesa, reserva.getFechaHora())) {
            JOptionPane.showMessageDialog(this, "No se puede guardar la reserva. La mesa no está disponible en el horario seleccionado.");
            return;
        }

        // Guardar la reserva en la base de datos
        reservaData.agregarReserva(reserva);

        JOptionPane.showMessageDialog(this, "Reserva confirmada para: " + reservationDateTime);
        cargarDatos(); // Actualizar la tabla de reservas
    }//GEN-LAST:event_jBGuardarActionPerformed

    
    
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
         this.setVisible(false);  
    }//GEN-LAST:event_exitActionPerformed

    private void jSId2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSId2StateChanged
        int idMesa = (int) jSId2.getValue();
        cargarMesaEnTablaPorId(idMesa);
    }//GEN-LAST:event_jSId2StateChanged

    private void jRON2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRON2ActionPerformed
        cargarMesasPorEstado(true);
    }//GEN-LAST:event_jRON2ActionPerformed

    private void jROFF2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jROFF2ActionPerformed
        cargarMesasPorEstado(false);
    }//GEN-LAST:event_jROFF2ActionPerformed

    private void jCBSectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBSectorActionPerformed
        String selectedSector = jCBSector.getSelectedItem().toString();
        actualizarSpinnersConMesas(selectedSector); 
        filtrarReservaPorSector(selectedSector);
    }//GEN-LAST:event_jCBSectorActionPerformed

    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
        // Limpiar campos de texto
        jTNombre.setText("");
        jTTelef.setText("");

        // Restablecer los spinners de comensales y ID de mesa a valores iniciales
        jSComens.setValue(0);
        jSIdMesa.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1)); // Reiniciar el spinner de mesa

        // Restablecer la selección de sector al primero en la lista
        jCBSector.setSelectedIndex(0);

        // Limpiar y restablecer la fecha y hora seleccionadas
        jDate.setCalendar(null); // Limpiar el JDateChooser de fecha
        jSHora.setValue(new Date()); // Restablecer el spinner de hora a la hora actual

        // Restablecer el estado de reserva (Alta/Baja)
        jRON.setSelected(false);
        jROFF.setSelected(false);

        // Restablecer el spinner de ID de reserva
        jSID.setValue(0);
        
        // Cargar todas las reservas en la tabla
        List<Reserva> reservas = reservaData.listarReservas();  // Obtén todas las reservas
        cargarReservasEnTabla(reservas); // Llama al método para cargar las reservas en la tabl
    }//GEN-LAST:event_LimpiarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        try {
            int idReserva = (int) jSID.getValue();
            Reserva reserva = reservaData.obtenerReservaPorId(idReserva);

            if (reserva != null) {
                reserva.setNombreCliente(jTNombre.getText());
                reserva.setTelefono(jTTelef.getText());
                reserva.setComensales((int) jSComens.getValue());
                reserva.setSector(jCBSector.getSelectedItem().toString());

                Date fecha = jDate.getDate();
                if (fecha == null) {
                    JOptionPane.showMessageDialog(this, "Por favor seleccione una fecha.", "Fecha requerida", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                LocalDate localDate = fecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                Date timeValue = (Date) jSHora.getValue();
                LocalTime localTime = timeValue.toInstant().atZone(ZoneId.systemDefault()).toLocalTime().withSecond(0).withNano(0);
                LocalDateTime fechaHora = LocalDateTime.of(localDate, localTime);
                reserva.setFechaHora(fechaHora);

                reserva.setEstado(jRON.isSelected());

                // Verificar disponibilidad antes de modificar la reserva
                if (!reservaData.verificarDisponibilidad(reserva.getMesa().getIdMesa(), reserva.getFechaHora())) {
                    JOptionPane.showMessageDialog(this, "No se puede modificar la reserva. La mesa no está disponible en el horario seleccionado.");
                    return;
                }

                reservaData.modificarReserva(reserva);
                JOptionPane.showMessageDialog(this, "Reserva modificada exitosamente.");
                cargarDatos();

            } else {
                JOptionPane.showMessageDialog(this, "No se encontró la reserva con el ID especificado.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar la reserva: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }        
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jCBSector1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBSector1ActionPerformed
        String sectorSeleccionado = (String) jCBSector1.getSelectedItem(); // Obtener el sector seleccionado
        if (sectorSeleccionado != null && !sectorSeleccionado.isEmpty()) {
            cargarMesasPorSector(sectorSeleccionado); // Cargar mesas por sector
        }
    }//GEN-LAST:event_jCBSector1ActionPerformed

    private void filtroSit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroSit1ActionPerformed
         String situacionSeleccionada = (String) filtroSit1.getSelectedItem(); // Obtener la situación seleccionada
        if (situacionSeleccionada != null && !situacionSeleccionada.isEmpty()) {
            cargarMesasPorSituacion(situacionSeleccionada); // Cargar mesas por situación
        }
    }//GEN-LAST:event_filtroSit1ActionPerformed

    private void jSIDStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSIDStateChanged
        try {
            int idReserva = (int) jSID.getValue(); // Obtener el ID de reserva del spinner
            buscarYMostrarReserva(idReserva); // Llama al método unificado para cargar y mostrar la reserva
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar la reserva.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // Solo para depuración
        }
    }//GEN-LAST:event_jSIDStateChanged

    private void jRONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRONActionPerformed
        cargarReservasPorEstado(true);
    }//GEN-LAST:event_jRONActionPerformed

    private void jROFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jROFFActionPerformed
        cargarReservasPorEstado(false);
    }//GEN-LAST:event_jROFFActionPerformed

    private void jSComensStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSComensStateChanged
        int comensales = (int) jSComens.getValue();
        filtrarReservaPorComensales(comensales);
    }//GEN-LAST:event_jSComensStateChanged

    private void jDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDatePropertyChange
        if ("date".equals(evt.getPropertyName())) {  // Verifica que el cambio sea en la propiedad 'date'
            Date selectedDate = jDate.getDate();
            if (selectedDate != null) {
                // Convertir la fecha seleccionada a LocalDate y establecer el rango de día completo
                LocalDate fecha = selectedDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                LocalDateTime inicioDelDia = fecha.atStartOfDay();
                LocalDateTime finDelDia = fecha.atTime(LocalTime.MAX);

                // Filtrar reservas en el rango del día completo
                filtrarPorRangoFechaHora(inicioDelDia, finDelDia);
            
            }
        }
    }//GEN-LAST:event_jDatePropertyChange

    private void jDate2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDate2PropertyChange
        if ("date".equals(evt.getPropertyName())) {  // Verifica que el cambio sea en la propiedad 'date'
            Date inicioDate = jDate1.getDate();
            Date finDate = jDate2.getDate();

            if (inicioDate != null && finDate != null) {
                // Convertir la fecha de inicio a LocalDate y establecer el inicio del día
                LocalDateTime inicio = inicioDate.toInstant()
                                                 .atZone(ZoneId.systemDefault())
                                                 .toLocalDate()
                                                 .atStartOfDay();

                // Convertir la fecha de fin a LocalDate y establecer el final del día
                LocalDateTime fin = finDate.toInstant()
                                           .atZone(ZoneId.systemDefault())
                                           .toLocalDate()
                                           .atTime(LocalTime.MAX);

                filtrarPorRangoFechaHora(inicio, fin);
           
            }  
        }
    }//GEN-LAST:event_jDate2PropertyChange
    
    private void configureDateTimePickers() {
    // Configura el JDateChooser para la selección de la fecha
        jDate.setDateFormatString("dd-MM-yyyy");
        jDate.setMinSelectableDate(new Date()); // Configura fecha mínima como hoy

        // Configura jSHora como selector de tiempo con SpinnerDateModel para manejar objetos Date (solo horas y minutos)
        SpinnerDateModel timeModel = new SpinnerDateModel(new Date(), null, null, Calendar.MINUTE);
        jSHora.setModel(timeModel);
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(jSHora, "HH:mm");
        jSHora.setEditor(timeEditor);
    }
    
    public Date getSelectedDateTime() {
        // Combina fecha y hora seleccionadas en un solo objeto Date
        Date selectedDate = jDate.getDate();
        Date selectedTime = (Date) jSHora.getValue();

        if (selectedDate == null) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una fecha.", "Fecha requerida", JOptionPane.WARNING_MESSAGE);
            return null;
        }

        Calendar calendar = Calendar.getInstance();
        calendar.setTime(selectedDate);

        Calendar timeCal = Calendar.getInstance();
        timeCal.setTime(selectedTime);

        // Configura la hora en el calendario de la fecha
        calendar.set(Calendar.HOUR_OF_DAY, timeCal.get(Calendar.HOUR_OF_DAY));
        calendar.set(Calendar.MINUTE, timeCal.get(Calendar.MINUTE));
        calendar.set(Calendar.SECOND, timeCal.get(Calendar.SECOND));

        return calendar.getTime();
    }

    private void buscarYMostrarReserva(int idReserva) {
    // Obtener la reserva desde la base de datos
    Reserva reserva = reservaData.obtenerReservaPorId(idReserva);
    
        if (reserva != null) {
            // Cargar datos de la reserva en los componentes
            cargarReservaEnCampos(reserva); // Método que asigna los datos de la reserva a los componentes de la interfaz

            cargarReservaPorIdEnTabla(idReserva); // Filtrar la tabla para mostrar solo la reserva seleccionada
            
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró una reserva con el ID especificado.", "Reserva no encontrada", JOptionPane.WARNING_MESSAGE);
            limpiarCamposReserva(); // Limpiar campos si no se encuentra la reserva
            borrarFilas(); // Borrar filas de la tabla
        }
    }

    private void filtrarPorFechaUnica(Date fechaSeleccionada) {
        if (fechaSeleccionada != null) {
            // Convertir `Date` a `LocalDateTime` y obtener el rango del día
            LocalDate fecha = fechaSeleccionada.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDateTime inicioDelDia = fecha.atStartOfDay();
            LocalDateTime finDelDia = fecha.atTime(LocalTime.MAX);

            // Filtrar por este rango de fecha
            borrarFilas();
            List<Reserva> reservas = reservaData.obtenerReservasPorRangoFechaHora(inicioDelDia, finDelDia);
            cargarReservasEnTabla(reservas);
        
        }
    }

    private void filtrarPorRangoFechaHora(LocalDateTime inicio, LocalDateTime fin) {
        borrarFilas();
        List<Reserva> reservas = reservaData.obtenerReservasPorRangoFechaHora(inicio, fin);
        cargarReservasEnTabla(reservas);
    }
    
    private void actualizarSpinnersConMesas(String sector) {  
        List<Mesa> mesas = mesaData.listarMesasPorSector(sector);

        // Obtener los IDs de todas las mesas, sin importar su estado o situación
        List<Integer> mesaIds = mesas.stream()
            .map(Mesa::getIdMesa)
            .toList();

        if (!mesaIds.isEmpty()) {
            // Convertir la lista de IDs a un arreglo de Integer
            Integer[] mesaIdsArray = mesaIds.toArray(new Integer[0]);

            // Configurar el spinner para mostrar todos los IDs de las mesas
            jSIdMesa.setModel(new SpinnerListModel(mesaIdsArray));
            jSIdMesa.setValue(mesaIdsArray[0]); // Establecer el primer ID como valor inicial
        } else {
            // Si no hay mesas en el sector, configurar el spinner con un valor de 0 y mostrar un mensaje
            jSIdMesa.setModel(new SpinnerNumberModel(0, 0, 0, 1));
            JOptionPane.showMessageDialog(this, "No hay mesas en el sector seleccionado.", "Mesas no disponibles", JOptionPane.WARNING_MESSAGE);
        }
    }
     
    private void filtrarReservaPorComensales(int comensales) {
        // Limpiar la tabla antes de agregar nuevos resultados
        borrarFilas();

        // Obtener las reservas que coinciden con la cantidad de comensales
        List<Reserva> reservas = reservaData.obtenerReservasPorComensales(comensales);

        // Cargar las reservas filtradas en la tabla
        cargarReservasEnTabla(reservas);
    }

    private void filtrarReservaPorSector(String sector) {
        borrarFilas();
        List<Reserva> reservas = reservaData.obtenerReservasPorSector(sector);        
        cargarReservasEnTabla(reservas);
    }

    private void cargarReservasPorEstado(boolean estado) {
        modelo.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos
        List<Reserva> r = reservaData.obtenerReservasPorEstado(estado); 
            for (Reserva res : r) {
                modelo.addRow(new Object[]{
                    res.getIdReserva(),
                    res.getMesa(),  
                    res.getNombreCliente(),    
                    res.getTelefono(),         
                    res.getComensales(),
                    res.getSector(),         
                    res.getFechaHora(),
                    res.isEstado() ? "Alta" : "Baja"
                });
            }
    }

    private void cargarReservaPorIdEnTabla(int idReserva) {
        borrarFilas(); // Limpiar la tabla antes de cargar los datos
        Reserva reserva = reservaData.obtenerReservaPorId(idReserva); // Buscar la reserva

        if (reserva != null) {
            // Agregar la reserva a la tabla
            modelo.addRow(new Object[]{
                reserva.getIdReserva(),
                reserva.getMesa().getIdMesa(),
                reserva.getNombreCliente(),
                reserva.getTelefono(),
                reserva.getComensales(),
                reserva.getSector(),
                reserva.getFechaHora(),
                reserva.isEstado() ? "Alta" : "Baja"
            });
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró la reserva con el ID especificado.");
        }
    }
    
    private void cargarMesasPorEstado(boolean estado) {
            modelo1.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos
            List<Mesa> mesas = mesaData.listarMesasPorEstado(estado); // Obtener mesas por estado

            // Agregar cada mesa a la tabla
            for (Mesa m : mesas) {
                modelo1.addRow(new Object[]{
                m.getIdMesa(),
                m.getCapacidad(),
                m.isEstado() ? "Habilitada" : "Deshabilitada",
                m.getSector(),
                m.getSituacion()
            });
        }
    }

    private void cargarMesasPorSector(String sector) {
        modelo1.setRowCount(0);// Limpiar la tabla antes de cargar nuevos datos
        List<Mesa> mesas = mesaData.listarMesasPorSector(sector);

        for (Mesa m : mesas) {
            modelo1.addRow(new Object[]{
                m.getIdMesa(),
                m.getCapacidad(),
                m.isEstado() ? "Habilitada" : "Deshabilitada",
                m.getSector(),
                m.getSituacion()
            });
        }
    }
    
    private void cargarMesasPorSituacion(String situacion) {
        modelo1.setRowCount(0); // Limpiar la tabla
        List<Mesa> mesas = mesaData.buscarMesasPorSituacion(situacion); // Obtener mesas por situación

        for (Mesa m : mesas) {
            modelo1.addRow(new Object[]{
                m.getIdMesa(),
                m.getCapacidad(),
                m.isEstado() ? "Habilitada" : "Deshabilitada",
                m.getSector(),
                m.getSituacion()
            });
        }
    } 
        
    private void cargarMesaEnTablaPorId(int id) {
        // Limpiar la tabla antes de cargar la nueva mesa
        modelo1.setRowCount(0);

        // Buscar la mesa por ID usando el método `buscarMesa`
        Mesa mesa = mesaData.buscarMesa(id);

        if (mesa != null) {
            // Agregar los datos de la mesa a la tabla
            modelo1.addRow(new Object[]{
                mesa.getIdMesa(),
                mesa.getCapacidad(),
                mesa.isEstado() ? "Habilitada" : "Deshabilitada",
                mesa.getSector(),
                mesa.getSituacion()
            });
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró la mesa con ID: " + id, "Mesa no encontrada", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private void limpiarCamposReserva() {
        jTNombre.setText("");
        jTTelef.setText("");
        jSComens.setValue(0);
        jCBSector.setSelectedIndex(0);
        jDate.setCalendar(null); // Limpia el campo de fecha
        jSHora.setValue(new Date()); // Restablece el spinner de hora a la hora actual
        jSIdMesa.setValue(0);
        jRON.setSelected(false);
        jROFF.setSelected(false);
        jSID.setValue(0);
    }
    
    private void cargarReservaEnCampos(Reserva reserva) {
        jTNombre.setText(reserva.getNombreCliente());
        jTTelef.setText(reserva.getTelefono());
        jSComens.setValue(reserva.getComensales());
        jCBSector.setSelectedItem(reserva.getSector());
        jDate.setDate(java.sql.Date.valueOf(reserva.getFechaHora().toLocalDate()));
        jSHora.setValue(java.sql.Time.valueOf(reserva.getFechaHora().toLocalTime().withSecond(0).withNano(0)));

        int mesaId = (reserva.getMesa() != null) ? reserva.getMesa().getIdMesa() : 0;
        jSIdMesa.setModel(new SpinnerNumberModel(mesaId, 0, Integer.MAX_VALUE, 1));
        jSIdMesa.setValue(mesaId); // Establece el valor del ID de la mesa
        
        jRON.setSelected(reserva.isEstado());
        jROFF.setSelected(!reserva.isEstado());
    }

    private void filtrarPorNombreCliente() {
        modelo.setRowCount(0);  // Limpiar la tabla antes de agregar nuevos resultados
        String textoBusqueda = jTNombre.getText().trim(); // Obtener el texto del campo de búsqueda y eliminar espacios en blanco

        if (!textoBusqueda.isEmpty()) { 
            List<Reserva> reservasFiltradas = reservaData.obtenerReservaPorNombre(textoBusqueda);
            cargarReservasEnTabla(reservasFiltradas);  
        } else {
            cargarDatos(); // Cargar todas las reservas si el campo de búsqueda está vacío
        }
    }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton Limpiar;
  private javax.swing.JButton exit;
  private javax.swing.JComboBox<String> filtroSit1;
  private javax.swing.JButton jBGuardar;
  private javax.swing.JButton jBModificar;
  private javax.swing.JComboBox<String> jCBSector;
  private javax.swing.JComboBox<String> jCBSector1;
  private com.toedter.calendar.JDateChooser jDate;
  private com.toedter.calendar.JDateChooser jDate1;
  private com.toedter.calendar.JDateChooser jDate2;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel13;
  private javax.swing.JLabel jLabel14;
  private javax.swing.JLabel jLabel15;
  private javax.swing.JLabel jLabel16;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JRadioButton jROFF;
  private javax.swing.JRadioButton jROFF2;
  private javax.swing.JRadioButton jRON;
  private javax.swing.JRadioButton jRON2;
  private javax.swing.JSpinner jSComens;
  private javax.swing.JSpinner jSHora;
  private javax.swing.JSpinner jSID;
  private javax.swing.JSpinner jSId2;
  private javax.swing.JSpinner jSIdMesa;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTextField jTNombre;
  private javax.swing.JTable jTR;
  private javax.swing.JTextField jTTelef;
  private javax.swing.JTable jtMesas;
  // End of variables declaration//GEN-END:variables

    //  Cabecera de la 'tabla'
    private void armarCabecera() {
        modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hace que todas las celdas no sean editables
            }
        };

        // Agregar columnas al modelo de la tabla
        modelo.addColumn("IDReserva");
        modelo.addColumn("IDMesa");
        modelo.addColumn("Nombre Cliente");
        modelo.addColumn("Telefono");
        modelo.addColumn("Comensales");
        modelo.addColumn("Sector");
        modelo.addColumn("Fecha y Hora");
        modelo.addColumn("Estado");

        // Establecer el modelo de la tabla y opciones
        jTR.setModel(modelo);
        jTR.getTableHeader().setReorderingAllowed(false); // Impide mover las columnas
    }

    private void borrarFilas(){
        int fila=jTR.getRowCount()-1;
        for(int f=fila; f>=0;f--){
            modelo.removeRow(f);
        }
    }
  
    private void cargarReservasEnTabla(List<Reserva> reservas) {
        modelo.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos
        for (Reserva res : reservas) {
            modelo.addRow(new Object[]{
                res.getIdReserva(),
                res.getMesa().getIdMesa(),
                res.getNombreCliente(),
                res.getTelefono(),
                res.getComensales(),
                res.getSector(),
                res.getFechaHora(),
                res.isEstado() ? "Alta" : "Baja"
            });
        }
    }

    private void cargarDatos() {
        List<Reserva> reservas = reservaData.listarReservas();  
        cargarReservasEnTabla(reservas);
    }
        //  Cabecera de la 'tabla'
    private void armarCabecera1() {
        modelo1 = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hace que todas las celdas no sean editables
            }
        };

        // Agregar columnas al modelo de la tabla
        modelo1.addColumn("N° MESA");
        modelo1.addColumn("CAPACIDAD");
        modelo1.addColumn("ESTADO");
        modelo1.addColumn("SECTOR");
        modelo1.addColumn("SITUACION");

        // Establecer el modelo de la tabla y opciones
        jtMesas.setModel(modelo1);
        jtMesas.getTableHeader().setReorderingAllowed(false); // Impide mover las columnas
    }

    //  Cargar datos a la 'tabla'
    private void cargarDatos1() {
        modelo1.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos
        List<Mesa> mesas = mesaData.listarMesas(); // Obtener la lista de mesas desde la fuente de datos

        for (Mesa m : mesas) {
            modelo1.addRow(new Object[]{
                m.getIdMesa(),         // Obtener el ID de la mesa
                m.getCapacidad(),      // Obtener la capacidad
                m.isEstado() ? "Habilitada" : "Deshabilitada", // Convertir el estado booleano a texto
                m.getSector(),         // Obtener el sector
                m.getSituacion()       // Obtener la situación
            });
        }
    }

   

}
