/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import Modelo.Reserva;
import Persistencia.Conexion;
import Persistencia.MesaData;
import Persistencia.ReservaData;
import java.sql.Connection;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;

/**
 *
 * @author Roma
 */
public class GReservas extends javax.swing.JPanel {
    private ReservaData reservaData; 
    private MesaData mesaData;
    private DefaultTableModel modelo= new DefaultTableModel(){ 
        public boolean isCellEditable(int fila, int column){
           
            return false;// evita la modificacion de datos en las celdas
        }
    }; 
    /**
     * Creates new form GReservas
     */
    public GReservas(Connection connection) {
        initComponents();

        if (connection == null) {
            throw new IllegalArgumentException("La conexión no puede ser nula");
        }

        // Inicializar reservaData y mesaData con la conexión
        this.reservaData = new ReservaData(connection);
        this.mesaData = new MesaData(connection);

        configureDateTimePickers();
        jSIdMesa.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        jSIdMesa1.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        jSIdMesa2.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        jSIdMesa3.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        jSHora.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        jSComens.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
        
        jTTelef.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (!Character.isDigit(c)) {
                    evt.consume();
                    JOptionPane.showMessageDialog(null, "Solo se permiten números en el campo de Código.");
                }
            }
        });
        
        armarCabecera(); // Configurar cabecera de la tabla
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jTNombre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTTelef = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSComens = new javax.swing.JSpinner();
        jCBSector = new javax.swing.JComboBox<>();
        jBGuardar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSIdMesa = new javax.swing.JSpinner();
        jSIdMesa1 = new javax.swing.JSpinner();
        jSIdMesa2 = new javax.swing.JSpinner();
        jSIdMesa3 = new javax.swing.JSpinner();
        jDate = new com.toedter.calendar.JDateChooser();
        jSHora = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jRON = new javax.swing.JRadioButton();
        jROFF = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        jSID = new javax.swing.JSpinner();
        jBModificar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTR = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSId2 = new javax.swing.JSpinner();
        jTFCodigo2 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jRON2 = new javax.swing.JRadioButton();
        jROFF2 = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        jCBSector1 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jSComens1 = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jDate1 = new com.toedter.calendar.JDateChooser();
        jSHora1 = new javax.swing.JSpinner();
        jDate2 = new com.toedter.calendar.JDateChooser();
        jSHora2 = new javax.swing.JSpinner();
        exit = new javax.swing.JButton();

        jPanel2.setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setText("Nombre de Cliente:");

        jLabel2.setText("Teléfono de Cliente:");

        jLabel3.setText("Fecha y hora:");

        jLabel4.setText("Comensales:");

        jLabel5.setText("Sector de reserva:");

        jCBSector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Terraza", "Patio", "Comedor", "Privado", "Interior" }));

        jBGuardar.setText("Confirmar Reserva");
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jLabel6.setText("Seleccionar mesa:");

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("CREAR RESERVA");

        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("ESTADO");

        jRON.setText("Alta");

        jROFF.setText("Baja");

        jLabel9.setText("ID");

        jSID.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSIDStateChanged(evt);
            }
        });

        jBModificar.setText("MODIFICAR");

        jPanel1.setBackground(new java.awt.Color(255, 153, 51));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTR.setBackground(new java.awt.Color(0, 153, 153));
        jTR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTR);

        jButton1.setText("jButton1");

        jLabel10.setFont(new java.awt.Font("Felix Titling", 3, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 102, 0));
        jLabel10.setText("FILTRAR por:");

        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("ID");

        jSId2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSId2StateChanged(evt);
            }
        });

        jTFCodigo2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFCodigo2KeyReleased(evt);
            }
        });

        jLabel30.setForeground(new java.awt.Color(0, 0, 0));
        jLabel30.setText("NOMBRE");

        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("ESTADO");

        jRON2.setText("Alta");
        jRON2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRON2ActionPerformed(evt);
            }
        });

        jROFF2.setText("Baja");
        jROFF2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jROFF2ActionPerformed(evt);
            }
        });

        jLabel12.setText("Sector de reserva:");

        jCBSector1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Terraza", "Patio", "Comedor", "Privado", "Interior" }));

        jLabel13.setText("Comensales:");

        jLabel14.setText("Fecha y hora:");

        exit.setText("X");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jSComens1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCBSector1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jSHora1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jSHora2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel10)
                                        .addGap(42, 42, 42)
                                        .addComponent(jButton1))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(16, 16, 16)
                                                .addComponent(jLabel11)
                                                .addGap(18, 18, 18))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel30)
                                                .addGap(4, 4, 4)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSId2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTFCodigo2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(exit)
                                    .addComponent(jRON2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jROFF2))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(947, 947, 947)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTFCodigo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(exit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel11)
                                .addComponent(jSId2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jRON2)
                                .addComponent(jROFF2)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSComens1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBSector1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addComponent(jLabel14)
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSHora1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSHora2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(jLabel15)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTTelef, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSHora, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDate, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSComens, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(67, 67, 67)
                                .addComponent(jRON))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jBModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSID, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jROFF, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jCBSector, 0, 161, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jSIdMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jSIdMesa1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jTNombre)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jSIdMesa3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jSIdMesa2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jBGuardar))))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTTelef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSComens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBSector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSIdMesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSIdMesa1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSIdMesa3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSIdMesa2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRON)
                    .addComponent(jROFF)
                    .addComponent(jLabel8))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBModificar)
                    .addComponent(jSID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        Date reservationDateTime = getSelectedDateTime();

        if (reservationDateTime != null) {
            
        
            int idMesa1 = (int) jSIdMesa.getValue();
            int idMesa2 = (int) jSIdMesa1.getValue();
            int idMesa3 = (int) jSIdMesa2.getValue();
            int idMesa4 = (int) jSIdMesa3.getValue();

            actualizarEstadoMesas(idMesa1, idMesa2, idMesa3, idMesa4);

            System.out.println("Reserva confirmada para: " + reservationDateTime);
        }
    }//GEN-LAST:event_jBGuardarActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
         this.setVisible(false);  
    }//GEN-LAST:event_exitActionPerformed

    private void jSId2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSId2StateChanged
        int idReserva = (int) jSId2.getValue(); // Obtener el valor del spinner como ID de reserva
        cargarReservaPorIdEnTabla(idReserva); // Cargar la reserva en la tabla según el ID
    }//GEN-LAST:event_jSId2StateChanged

    private void jTFCodigo2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCodigo2KeyReleased
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume(); // Ignora cualquier caracter que no sea un dígito
            JOptionPane.showMessageDialog(this, "Solo se permiten números");
        }
    }//GEN-LAST:event_jTFCodigo2KeyReleased

    private void jRON2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRON2ActionPerformed
        cargarReservasPorEstado(true);
    }//GEN-LAST:event_jRON2ActionPerformed

    private void jROFF2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jROFF2ActionPerformed
        cargarReservasPorEstado(false);
    }//GEN-LAST:event_jROFF2ActionPerformed

    private void jSIDStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSIDStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jSIDStateChanged
    
    private void configureDateTimePickers() {
            // Configura el JDateChooser para la selección de la fecha
        jDate.setDateFormatString("dd-MM-yyyy");
        jDate.setMinSelectableDate(new Date()); // Configura fecha mínima como hoy

            // Configura jSHora como selector de tiempo
        SpinnerDateModel timeModel = new SpinnerDateModel(new Date(), null, null, Calendar.HOUR_OF_DAY);
        jSHora.setModel(timeModel);
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(jSHora, "HH:mm:ss");
        jSHora.setEditor(timeEditor);
    }

    public Date getSelectedDateTime() {
        // Combina fecha y hora seleccionadas en un solo objeto Date
        Date selectedDate = jDate.getDate();
        Date selectedTime = (Date) jSHora.getValue();

        if (selectedDate == null) {
                JOptionPane.showMessageDialog(this, "Por favor seleccione una fecha.", "Fecha requerida", JOptionPane.WARNING_MESSAGE);
                return null;
        }

        Calendar calendar = Calendar.getInstance();
        calendar.setTime(selectedDate);

        Calendar timeCal = Calendar.getInstance();
        timeCal.setTime(selectedTime);

        // Configura la hora en el calendario de la fecha
        calendar.set(Calendar.HOUR_OF_DAY, timeCal.get(Calendar.HOUR_OF_DAY));
        calendar.set(Calendar.MINUTE, timeCal.get(Calendar.MINUTE));
        calendar.set(Calendar.SECOND, timeCal.get(Calendar.SECOND));

        return calendar.getTime();
    }

    private void actualizarEstadoMesas(int... idsMesas) {
        if (idsMesas.length == 0) {
            mesaData.actualizarTodasLasMesas("Disponible", true);
        } else {
            for (int i = 0; i < idsMesas.length; i++) {
                String situacion = (i == idsMesas.length - 1) ? "Reservada" : "No disponible";
                boolean estado = (i == idsMesas.length - 1);
                mesaData.actualizarMesa(idsMesas[i], situacion, estado);
            }
        }
    }
    
    private void buscarYMostrarReserva(int idReserva) {
        // Obtener la reserva desde la base de datos
        Reserva reserva = reservaData.obtenerReservaPorId(idReserva);

        if (reserva != null) {
            // Cargar datos de la reserva en los componentes
            jTNombre.setText(reserva.getNombreCliente());
            jTTelef.setText(reserva.getTelefono());
            jSComens.setValue(reserva.getComensales());
            jCBSector.setSelectedItem(reserva.getSector());

            // Establecer fecha y hora en los respectivos componentes
            jDate.setDate(java.sql.Date.valueOf(reserva.getFechaHora().toLocalDate()));
            jSHora.setValue(java.sql.Time.valueOf(reserva.getFechaHora().toLocalTime()));

            // Ajustar el estado de la reserva
            if (reserva.isEstado()) {
                jRON.setSelected(true);
            } else {
                jROFF.setSelected(true);
            }

            // Asignar ID de la mesa (esto supone que tienes spinners para múltiples mesas)
            jSIdMesa.setValue(reserva.getMesa().getIdMesa());

            JOptionPane.showMessageDialog(this, "Datos de la reserva cargados correctamente.");
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró la reserva con el ID especificado.");
        }
    }

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) { 
        try {
            int idReserva = (int) jSID.getValue(); // ID de la reserva que quieres modificar, ahora desde el JSpinner
            Reserva reserva = reservaData.obtenerReservaPorId(idReserva);

            if (reserva != null) {
                // Actualizar los datos de la reserva según los valores en los componentes
                reserva.setNombreCliente(jTNombre.getText());
                reserva.setTelefono(jTTelef.getText());
                reserva.setComensales((int) jSComens.getValue());
                reserva.setSector(jCBSector.getSelectedItem().toString());

                // Obtener fecha seleccionada y convertirla a LocalDate
                Date fecha = jDate.getDate();
                LocalDate localDate = fecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

                // Obtener hora seleccionada y convertirla a LocalTime
                Date timeValue = (Date) jSHora.getValue();
                LocalTime localTime = timeValue.toInstant().atZone(ZoneId.systemDefault()).toLocalTime();

                // Crear LocalDateTime combinando fecha y hora
                LocalDateTime fechaHora = LocalDateTime.of(localDate, localTime);
                reserva.setFechaHora(fechaHora);

                // Estado de la reserva
                reserva.setEstado(jRON.isSelected());

                // Modificar en la base de datos
                reservaData.modificarReserva(reserva);
                JOptionPane.showMessageDialog(this, "Reserva modificada exitosamente.");
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró la reserva con el ID especificado.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar la reserva: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Método para filtrar reservas por nombre de cliente
    private void filtrarPorNombreCliente(String nombre) {
        borrarFilas();
        List<Reserva> reservas = reservaData.obtenerReservaPorNombre(nombre);
        cargarReservasEnTabla(reservas);
    }

    // Método para filtrar reservas por sector
    private void filtrarPorSector(String sector) {
        borrarFilas();
        List<Reserva> reservas = reservaData.obtenerReservasPorSector(sector);
        cargarReservasEnTabla(reservas);
    }

    // Método para filtrar reservas por cantidad de comensales
    private void filtrarPorComensales(int comensales) {
        borrarFilas();
        List<Reserva> reservas = reservaData.obtenerReservasPorComensales(comensales);
        cargarReservasEnTabla(reservas);
    }

    // Método para filtrar reservas por rango de fecha y hora
    private void filtrarPorRangoFechaHora(LocalDateTime inicio, LocalDateTime fin) {
        borrarFilas();
        List<Reserva> reservas = reservaData.obtenerReservasPorRangoFechaHora(inicio, fin);
        cargarReservasEnTabla(reservas);
    }

    // Método auxiliar para cargar una lista de reservas en la tabla
    private void cargarReservasEnTabla(List<Reserva> reservas) {
        for (Reserva res : reservas) {
            modelo.addRow(new Object[]{
                res.getIdReserva(),
                res.getMesa().getIdMesa(),
                res.getNombreCliente(),
                res.getTelefono(),
                res.getComensales(),
                res.getSector(),
                res.getFechaHora(),
                res.isEstado() ? "Alta" : "Baja"
            });
        }
    }

    private void cargarReservasPorEstado(boolean estado) {
        modelo.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos
        List<Reserva> r = reservaData.obtenerReservasPorEstado(estado); 
            for (Reserva res : r) {
                modelo.addRow(new Object[]{
                    res.getIdReserva(),
                    res.getMesa(),  
                    res.getNombreCliente(),    
                    res.getTelefono(),         
                    res.getComensales(),
                    res.getSector(),         
                    res.getFechaHora(),
                    res.isEstado() ? "Alta" : "Baja"
                });
            }
    }

    // Método para cargar una reserva específica por ID en la tabla
    private void cargarReservaPorIdEnTabla(int idReserva) {
        borrarFilas(); // Limpiar la tabla antes de cargar los datos
        Reserva reserva = reservaData.obtenerReservaPorId(idReserva); // Buscar la reserva

        if (reserva != null) {
            // Agregar la reserva a la tabla
            modelo.addRow(new Object[]{
                reserva.getIdReserva(),
                reserva.getMesa().getIdMesa(),
                reserva.getNombreCliente(),
                reserva.getTelefono(),
                reserva.getComensales(),
                reserva.getSector(),
                reserva.getFechaHora(),
                reserva.isEstado() ? "Alta" : "Baja"
            });
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró la reserva con el ID especificado.");
        }
    }
    
    
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exit;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jBModificar;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jCBSector;
    private javax.swing.JComboBox<String> jCBSector1;
    private com.toedter.calendar.JDateChooser jDate;
    private com.toedter.calendar.JDateChooser jDate1;
    private com.toedter.calendar.JDateChooser jDate2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jROFF;
    private javax.swing.JRadioButton jROFF2;
    private javax.swing.JRadioButton jRON;
    private javax.swing.JRadioButton jRON2;
    private javax.swing.JSpinner jSComens;
    private javax.swing.JSpinner jSComens1;
    private javax.swing.JSpinner jSHora;
    private javax.swing.JSpinner jSHora1;
    private javax.swing.JSpinner jSHora2;
    private javax.swing.JSpinner jSID;
    private javax.swing.JSpinner jSId2;
    private javax.swing.JSpinner jSIdMesa;
    private javax.swing.JSpinner jSIdMesa1;
    private javax.swing.JSpinner jSIdMesa2;
    private javax.swing.JSpinner jSIdMesa3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFCodigo2;
    private javax.swing.JTextField jTNombre;
    private javax.swing.JTable jTR;
    private javax.swing.JTextField jTTelef;
    // End of variables declaration//GEN-END:variables

    //  Cabecera de la 'tabla'
    private void armarCabecera() {
        modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hace que todas las celdas no sean editables
            }
        };

        // Agregar columnas al modelo de la tabla
        modelo.addColumn("IDReserva");
        modelo.addColumn("IDMesa");
        modelo.addColumn("Nombre Cliente");
        modelo.addColumn("Telefono");
        modelo.addColumn("Comensales");
        modelo.addColumn("Sector");
        modelo.addColumn("Fecha y Hora");
        modelo.addColumn("Estado");

        // Establecer el modelo de la tabla y opciones
        jTR.setModel(modelo);
        jTR.getTableHeader().setReorderingAllowed(false); // Impide mover las columnas
    }

    private void borrarFilas(){
        int fila=jTR.getRowCount()-1;
        for(int f=fila; f>=0;f--){
            modelo.removeRow(f);
        }
    }
   // Cargar datos a la 'tabla'
    private void cargarDatos() {
        modelo.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos
        List<Reserva> reservas = reservaData.listarReservas();  

            for (Reserva res : reservas) {
                modelo.addRow(new Object[]{
                    res.getIdReserva(),
                    res.getMesa(),  
                    res.getNombreCliente(),    
                    res.getTelefono(),         
                    res.getComensales(),
                    res.getSector(),         
                    res.getFechaHora(),
                    res.isEstado() ? "Alta" : "Baja"
                });
            }
    }
    
    
   

}
